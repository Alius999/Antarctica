/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./js/main.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./js/just-validate.es.js":
/*!********************************!*\
  !*** ./js/just-validate.es.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "default", function() { return JustValidate; });
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e2) { throw _e2; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e3) { didErr = true; err = _e3; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = function __defNormalProp(obj, key, value) {
  return key in obj ? __defProp(obj, key, {
    enumerable: true,
    configurable: true,
    writable: true,
    value: value
  }) : obj[key] = value;
};
var __spreadValues = function __spreadValues(a, b) {
  for (var prop in b || (b = {})) if (__hasOwnProp.call(b, prop)) __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols) {
    var _iterator = _createForOfIteratorHelper(__getOwnPropSymbols(b)),
      _step;
    try {
      for (_iterator.s(); !(_step = _iterator.n()).done;) {
        var prop = _step.value;
        if (__propIsEnum.call(b, prop)) __defNormalProp(a, prop, b[prop]);
      }
    } catch (err) {
      _iterator.e(err);
    } finally {
      _iterator.f();
    }
  }
  return a;
};
var __publicField = function __publicField(obj, key, value) {
  __defNormalProp(obj, _typeof(key) !== "symbol" ? key + "" : key, value);
  return value;
};
var EMAIL_REGEXP = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
var NUMBER_REGEXP = /^[0-9]+$/;
var PASSWORD_REGEXP = /^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$/;
var STRONG_PASSWORD_REGEXP = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
var isEmpty = function isEmpty(value) {
  var newVal = value;
  if (typeof value === "string") {
    newVal = value.trim();
  }
  return !newVal;
};
var isEmail = function isEmail(value) {
  return EMAIL_REGEXP.test(value);
};
var isLengthMoreThanMax = function isLengthMoreThanMax(value, len) {
  return value.length > len;
};
var isLengthLessThanMin = function isLengthLessThanMin(value, len) {
  return value.length < len;
};
var isNumber = function isNumber(value) {
  return NUMBER_REGEXP.test(value);
};
var isPassword = function isPassword(value) {
  return PASSWORD_REGEXP.test(value);
};
var isStrongPassword = function isStrongPassword(value) {
  return STRONG_PASSWORD_REGEXP.test(value);
};
var isNumberMoreThanMax = function isNumberMoreThanMax(value, len) {
  return value > len;
};
var isNumberLessThanMin = function isNumberLessThanMin(value, len) {
  return value < len;
};
var Rules = /* @__PURE__ */function (Rules2) {
  Rules2["Required"] = "required";
  Rules2["Email"] = "email";
  Rules2["MinLength"] = "minLength";
  Rules2["MaxLength"] = "maxLength";
  Rules2["Password"] = "password";
  Rules2["Number"] = "number";
  Rules2["MaxNumber"] = "maxNumber";
  Rules2["MinNumber"] = "minNumber";
  Rules2["StrongPassword"] = "strongPassword";
  Rules2["CustomRegexp"] = "customRegexp";
  Rules2["MinFilesCount"] = "minFilesCount";
  Rules2["MaxFilesCount"] = "maxFilesCount";
  Rules2["Files"] = "files";
  return Rules2;
}(Rules || {});
var GroupRules = /* @__PURE__ */function (GroupRules2) {
  GroupRules2["Required"] = "required";
  return GroupRules2;
}(GroupRules || {});
var CustomStyleTagIds = /* @__PURE__ */function (CustomStyleTagIds2) {
  CustomStyleTagIds2["Label"] = "label";
  CustomStyleTagIds2["LabelArrow"] = "labelArrow";
  return CustomStyleTagIds2;
}(CustomStyleTagIds || {});
var getDefaultFieldMessage = function getDefaultFieldMessage(rule, ruleValue) {
  switch (rule) {
    case Rules.Required:
      return "The field is required";
    case Rules.Email:
      return "Email has invalid format";
    case Rules.MaxLength:
      return "The field must contain a maximum of :value characters".replace(":value", String(ruleValue));
    case Rules.MinLength:
      return "The field must contain a minimum of :value characters".replace(":value", String(ruleValue));
    case Rules.Password:
      return "Password must contain minimum eight characters, at least one letter and one number";
    case Rules.Number:
      return "Value should be a number";
    case Rules.StrongPassword:
      return "Password should contain minimum eight characters, at least one uppercase letter, one lowercase letter, one number and one special character";
    case Rules.MaxNumber:
      return "Number should be less or equal than :value".replace(":value", String(ruleValue));
    case Rules.MinNumber:
      return "Number should be more or equal than :value".replace(":value", String(ruleValue));
    case Rules.MinFilesCount:
      return "Files count should be more or equal than :value".replace(":value", String(ruleValue));
    case Rules.MaxFilesCount:
      return "Files count should be less or equal than :value".replace(":value", String(ruleValue));
    case Rules.Files:
      return "Uploaded files have one or several invalid properties (extension/size/type etc)";
    default:
      return "Value is incorrect";
  }
};
var getDefaultGroupMessage = function getDefaultGroupMessage(rule) {
  switch (rule) {
    case GroupRules.Required:
      return "The field is required";
    default:
      return "Group is incorrect";
  }
};
var isPromise = function isPromise(val) {
  return !!val && typeof val.then === "function";
};
var getNodeParents = function getNodeParents(el) {
  var elem = el;
  var els = [];
  while (elem) {
    els.unshift(elem);
    elem = elem.parentNode;
  }
  return els;
};
var getClosestParent = function getClosestParent(groups, parents) {
  var reversedParents = _toConsumableArray(parents).reverse();
  for (var i = 0, len = reversedParents.length; i < len; ++i) {
    var parent = reversedParents[i];
    for (var key in groups) {
      var group = groups[key];
      if (group.groupElem === parent) {
        return [key, group];
      }
    }
  }
  return null;
};
var getClassList = function getClassList(classList) {
  if (Array.isArray(classList)) {
    return classList.filter(function (cls) {
      return cls.length > 0;
    });
  }
  if (typeof classList === "string" && classList.trim()) {
    return _toConsumableArray(classList.split(" ").filter(function (cls) {
      return cls.length > 0;
    }));
  }
  return [];
};
var errorLabelCss = ".just-validate-error-label[data-tooltip=true]{position:fixed;padding:4px 8px;background:#423f3f;color:#fff;white-space:nowrap;z-index:10;border-radius:4px;transform:translateY(-5px)}.just-validate-error-label[data-tooltip=true]:before{content:'';width:0;height:0;border-left:solid 5px transparent;border-right:solid 5px transparent;border-bottom:solid 5px #423f3f;position:absolute;z-index:3;display:block;bottom:-5px;transform:rotate(180deg);left:calc(50% - 5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]{transform:translateX(-5px)}.just-validate-error-label[data-tooltip=true][data-direction=left]:before{right:-7px;bottom:auto;left:auto;top:calc(50% - 2px);transform:rotate(90deg)}.just-validate-error-label[data-tooltip=true][data-direction=right]{transform:translateX(5px)}.just-validate-error-label[data-tooltip=true][data-direction=right]:before{right:auto;bottom:auto;left:-7px;top:calc(50% - 2px);transform:rotate(-90deg)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]{transform:translateY(5px)}.just-validate-error-label[data-tooltip=true][data-direction=bottom]:before{right:auto;bottom:auto;left:calc(50% - 5px);top:-5px;transform:rotate(0)}";
var TOOLTIP_ARROW_HEIGHT = 5;
var defaultGlobalConfig = {
  errorFieldStyle: {
    color: "#b81111",
    border: "1px solid #B81111"
  },
  errorFieldCssClass: "just-validate-error-field",
  successFieldCssClass: "just-validate-success-field",
  errorLabelStyle: {
    color: "#b81111"
  },
  errorLabelCssClass: "just-validate-error-label",
  successLabelCssClass: "just-validate-success-label",
  focusInvalidField: true,
  lockForm: true,
  testingMode: false
};
var JustValidate = /*#__PURE__*/function () {
  function JustValidate(form, globalConfig, dictLocale) {
    var _this = this;
    _classCallCheck(this, JustValidate);
    __publicField(this, "form", null);
    __publicField(this, "fields", {});
    __publicField(this, "groupFields", {});
    __publicField(this, "errors", {});
    __publicField(this, "isValid", false);
    __publicField(this, "isSubmitted", false);
    __publicField(this, "globalConfig", defaultGlobalConfig);
    __publicField(this, "errorLabels", {});
    __publicField(this, "successLabels", {});
    __publicField(this, "eventListeners", []);
    __publicField(this, "dictLocale", []);
    __publicField(this, "currentLocale");
    __publicField(this, "customStyleTags", {});
    __publicField(this, "onSuccessCallback");
    __publicField(this, "onFailCallback");
    __publicField(this, "tooltips", []);
    __publicField(this, "lastScrollPosition");
    __publicField(this, "isScrollTick");
    __publicField(this, "refreshAllTooltips", function () {
      _this.tooltips.forEach(function (item) {
        item.refresh();
      });
    });
    __publicField(this, "handleDocumentScroll", function () {
      _this.lastScrollPosition = window.scrollY;
      if (!_this.isScrollTick) {
        window.requestAnimationFrame(function () {
          _this.refreshAllTooltips();
          _this.isScrollTick = false;
        });
        _this.isScrollTick = true;
      }
    });
    __publicField(this, "formSubmitHandler", function (ev) {
      ev.preventDefault();
      _this.isSubmitted = true;
      _this.validateHandler(ev);
    });
    __publicField(this, "handleFieldChange", function (target) {
      var currentFieldName;
      for (var fieldName in _this.fields) {
        var field = _this.fields[fieldName];
        if (field.elem === target) {
          currentFieldName = fieldName;
          break;
        }
      }
      if (!currentFieldName) {
        return;
      }
      _this.validateField(currentFieldName, true);
    });
    __publicField(this, "handleGroupChange", function (target) {
      var currentGroup;
      var currentGroupName;
      for (var groupName in _this.groupFields) {
        var group = _this.groupFields[groupName];
        if (group.elems.find(function (elem) {
          return elem === target;
        })) {
          currentGroup = group;
          currentGroupName = groupName;
          break;
        }
      }
      if (!currentGroup || !currentGroupName) {
        return;
      }
      _this.validateGroup(currentGroupName, currentGroup);
    });
    __publicField(this, "handlerChange", function (ev) {
      if (!ev.target) {
        return;
      }
      _this.handleFieldChange(ev.target);
      _this.handleGroupChange(ev.target);
      _this.renderErrors();
    });
    this.initialize(form, globalConfig, dictLocale);
  }
  _createClass(JustValidate, [{
    key: "initialize",
    value: function initialize(form, globalConfig, dictLocale) {
      this.form = null;
      this.errors = {};
      this.isValid = false;
      this.isSubmitted = false;
      this.globalConfig = defaultGlobalConfig;
      this.errorLabels = {};
      this.successLabels = {};
      this.eventListeners = [];
      this.customStyleTags = {};
      this.tooltips = [];
      if (typeof form === "string") {
        var elem = document.querySelector(form);
        if (!elem) {
          throw Error("Form with ".concat(form, " selector not found! Please check the form selector"));
        }
        this.setForm(elem);
      } else if (form instanceof HTMLFormElement) {
        this.setForm(form);
      } else {
        throw Error("Form selector is not valid. Please specify a string selector or a DOM element.");
      }
      this.globalConfig = __spreadValues(__spreadValues({}, defaultGlobalConfig), globalConfig);
      if (dictLocale) {
        this.dictLocale = dictLocale;
      }
      if (this.isTooltip()) {
        var styleTag = document.createElement("style");
        styleTag.textContent = errorLabelCss;
        this.customStyleTags[CustomStyleTagIds.Label] = document.head.appendChild(styleTag);
        this.addListener("scroll", document, this.handleDocumentScroll);
      }
    }
  }, {
    key: "getLocalisedString",
    value: function getLocalisedString(str) {
      var _a;
      if (!this.currentLocale || !this.dictLocale.length) {
        return str;
      }
      var localisedStr = (_a = this.dictLocale.find(function (item) {
        return item.key === str;
      })) == null ? void 0 : _a.dict[this.currentLocale];
      return localisedStr || str;
    }
  }, {
    key: "getFieldErrorMessage",
    value: function getFieldErrorMessage(fieldRule, elem) {
      var msg = typeof fieldRule.errorMessage === "function" ? fieldRule.errorMessage(this.getElemValue(elem), this.fields) : fieldRule.errorMessage;
      return this.getLocalisedString(msg) || getDefaultFieldMessage(fieldRule.rule, fieldRule.value);
    }
  }, {
    key: "getFieldSuccessMessage",
    value: function getFieldSuccessMessage(successMessage, elem) {
      var msg = typeof successMessage === "function" ? successMessage(this.getElemValue(elem), this.fields) : successMessage;
      return this.getLocalisedString(msg);
    }
  }, {
    key: "getGroupErrorMessage",
    value: function getGroupErrorMessage(groupRule) {
      return this.getLocalisedString(groupRule.errorMessage) || getDefaultGroupMessage(groupRule.rule);
    }
  }, {
    key: "getGroupSuccessMessage",
    value: function getGroupSuccessMessage(groupRule) {
      return this.getLocalisedString(groupRule.successMessage);
    }
  }, {
    key: "setFieldInvalid",
    value: function setFieldInvalid(field, fieldRule) {
      this.fields[field].isValid = false;
      this.fields[field].errorMessage = this.getFieldErrorMessage(fieldRule, this.fields[field].elem);
    }
  }, {
    key: "setFieldValid",
    value: function setFieldValid(field, successMessage) {
      this.fields[field].isValid = true;
      if (successMessage !== void 0) {
        this.fields[field].successMessage = this.getFieldSuccessMessage(successMessage, this.fields[field].elem);
      }
    }
  }, {
    key: "setGroupInvalid",
    value: function setGroupInvalid(groupName, groupRule) {
      this.groupFields[groupName].isValid = false;
      this.groupFields[groupName].errorMessage = this.getGroupErrorMessage(groupRule);
    }
  }, {
    key: "setGroupValid",
    value: function setGroupValid(groupName, groupRule) {
      this.groupFields[groupName].isValid = true;
      this.groupFields[groupName].successMessage = this.getGroupSuccessMessage(groupRule);
    }
  }, {
    key: "getElemValue",
    value: function getElemValue(elem) {
      switch (elem.type) {
        case "checkbox":
          return elem.checked;
        case "file":
          return elem.files;
        default:
          return elem.value;
      }
    }
  }, {
    key: "validateGroupRule",
    value: function validateGroupRule(groupName, elems, groupRule) {
      switch (groupRule.rule) {
        case GroupRules.Required:
          {
            if (elems.every(function (elem) {
              return !elem.checked;
            })) {
              this.setGroupInvalid(groupName, groupRule);
            } else {
              this.setGroupValid(groupName, groupRule);
            }
          }
      }
    }
  }, {
    key: "validateFieldRule",
    value: function validateFieldRule(field, elem, fieldRule) {
      var _this2 = this;
      var afterInputChanged = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;
      var ruleValue = fieldRule.value;
      var elemValue = this.getElemValue(elem);
      if (fieldRule.plugin) {
        var result = fieldRule.plugin(elemValue, this.fields);
        if (!result) {
          this.setFieldInvalid(field, fieldRule);
        }
        return;
      }
      switch (fieldRule.rule) {
        case Rules.Required:
          {
            if (isEmpty(elemValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.Email:
          {
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (!isEmail(elemValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.MaxLength:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof ruleValue !== "number") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] should be a number. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            if (isLengthMoreThanMax(elemValue, ruleValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.MinLength:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof ruleValue !== "number") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] should be a number. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            if (isLengthLessThanMin(elemValue, ruleValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.Password:
          {
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            if (!isPassword(elemValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.StrongPassword:
          {
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            if (!isStrongPassword(elemValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.Number:
          {
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            if (!isNumber(elemValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.MaxNumber:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof ruleValue !== "number") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field should be a number. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            var num = +elemValue;
            if (Number.isNaN(num) || isNumberMoreThanMax(num, ruleValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.MinNumber:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof ruleValue !== "number") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field should be a number. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof elemValue !== "string") {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (elemValue === "") {
              break;
            }
            var _num = +elemValue;
            if (Number.isNaN(_num) || isNumberLessThanMin(_num, ruleValue)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.CustomRegexp:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              return;
            }
            var regexp;
            try {
              regexp = new RegExp(ruleValue);
            } catch (e) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] should be a valid regexp. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            var str = String(elemValue);
            if (str !== "" && !regexp.test(str)) {
              this.setFieldInvalid(field, fieldRule);
            }
            break;
          }
        case Rules.MinFilesCount:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof ruleValue !== "number") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field should be a number. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length < ruleValue) {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            break;
          }
        case Rules.MaxFilesCount:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (typeof ruleValue !== "number") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field should be a number. The field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            if (Number.isFinite(elemValue == null ? void 0 : elemValue.length) && elemValue.length > ruleValue) {
              this.setFieldInvalid(field, fieldRule);
              break;
            }
            break;
          }
        case Rules.Files:
          {
            if (ruleValue === void 0) {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field is not defined. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              return;
            }
            if (_typeof(ruleValue) !== "object") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field should be an object. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              return;
            }
            var filesConfig = ruleValue.files;
            if (_typeof(filesConfig) !== "object") {
              console.error("Value for ".concat(fieldRule.rule, " rule for [").concat(field, "] field should be an object with files array. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              return;
            }
            var isFilePropsInvalid = function isFilePropsInvalid(file, fileConfig) {
              var minSizeInvalid = Number.isFinite(fileConfig.minSize) && file.size < fileConfig.minSize;
              var maxSizeInvalid = Number.isFinite(fileConfig.maxSize) && file.size > fileConfig.maxSize;
              var nameInvalid = Array.isArray(fileConfig.names) && !fileConfig.names.includes(file.name);
              var extInvalid = Array.isArray(fileConfig.extensions) && !fileConfig.extensions.includes(file.name.split(".")[file.name.split(".").length - 1]);
              var typeInvalid = Array.isArray(fileConfig.types) && !fileConfig.types.includes(file.type);
              return minSizeInvalid || maxSizeInvalid || nameInvalid || extInvalid || typeInvalid;
            };
            if (_typeof(elemValue) === "object" && elemValue !== null) {
              for (var fileIdx = 0, len = elemValue.length; fileIdx < len; ++fileIdx) {
                var file = elemValue.item(fileIdx);
                if (!file) {
                  this.setFieldInvalid(field, fieldRule);
                  break;
                }
                var filesInvalid = isFilePropsInvalid(file, filesConfig);
                if (filesInvalid) {
                  this.setFieldInvalid(field, fieldRule);
                  break;
                }
              }
            }
            break;
          }
        default:
          {
            if (typeof fieldRule.validator !== "function") {
              console.error("Validator for custom rule for [".concat(field, "] field should be a function. This field will be always invalid."));
              this.setFieldInvalid(field, fieldRule);
              return;
            }
            var _result = fieldRule.validator(elemValue, this.fields);
            if (typeof _result !== "boolean" && typeof _result !== "function") {
              console.error("Validator return value for [".concat(field, "] field should be boolean or function. It will be cast to boolean."));
            }
            if (typeof _result === "function") {
              if (afterInputChanged) {
                this.fields[field].asyncCheckPending = true;
              } else {
                this.fields[field].asyncCheckPending = false;
                var promise = _result();
                if (!isPromise(promise)) {
                  console.error("Validator function for custom rule for [".concat(field, "] field should return a Promise. This field will be always invalid."));
                  this.setFieldInvalid(field, fieldRule);
                  return;
                }
                return promise.then(function (resp) {
                  if (!resp) {
                    _this2.setFieldInvalid(field, fieldRule);
                  }
                }).catch(function () {
                  _this2.setFieldInvalid(field, fieldRule);
                });
              }
            }
            if (!_result) {
              this.setFieldInvalid(field, fieldRule);
            }
          }
      }
    }
  }, {
    key: "validateField",
    value: function validateField(fieldName) {
      var _this3 = this;
      var afterInputChanged = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      var _a;
      var field = this.fields[fieldName];
      field.isValid = true;
      var promises = [];
      _toConsumableArray(field.rules).reverse().forEach(function (rule) {
        var res = _this3.validateFieldRule(fieldName, field.elem, rule, afterInputChanged);
        if (isPromise(res)) {
          promises.push(res);
        }
      });
      if (field.isValid) {
        this.setFieldValid(fieldName, (_a = field.config) == null ? void 0 : _a.successMessage);
      }
      return Promise.allSettled(promises);
    }
  }, {
    key: "revalidateField",
    value: function revalidateField(field) {
      var _this4 = this;
      if (typeof field !== "string") {
        throw Error("Field selector is not valid. Please specify a string selector.");
      }
      if (!this.fields[field]) {
        console.error("Field not found. Check the field selector.");
        return Promise.reject();
      }
      return new Promise(function (resolve) {
        _this4.validateField(field, true).finally(function () {
          _this4.clearFieldStyle(field);
          _this4.clearFieldLabel(field);
          _this4.renderFieldError(field);
          resolve(!!_this4.fields[field].isValid);
        });
      });
    }
  }, {
    key: "validateGroup",
    value: function validateGroup(groupName, group) {
      var _this5 = this;
      var promises = [];
      _toConsumableArray(group.rules).reverse().forEach(function (rule) {
        var res = _this5.validateGroupRule(groupName, group.elems, rule);
        if (isPromise(res)) {
          promises.push(res);
        }
      });
      return Promise.allSettled(promises);
    }
  }, {
    key: "focusInvalidField",
    value: function focusInvalidField() {
      var _this6 = this;
      var _loop = function _loop() {
        var field = _this6.fields[fieldName];
        if (!field.isValid) {
          setTimeout(function () {
            return field.elem.focus();
          }, 0);
          return "break";
        }
      };
      for (var fieldName in this.fields) {
        var _ret = _loop();
        if (_ret === "break") break;
      }
    }
  }, {
    key: "afterSubmitValidation",
    value: function afterSubmitValidation() {
      var forceRevalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      this.renderErrors(forceRevalidation);
      if (this.globalConfig.focusInvalidField) {
        this.focusInvalidField();
      }
    }
  }, {
    key: "validate",
    value: function validate() {
      var _this7 = this;
      var forceRevalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      return new Promise(function (resolve) {
        var promises = [];
        Object.keys(_this7.fields).forEach(function (fieldName) {
          var promise = _this7.validateField(fieldName);
          if (isPromise(promise)) {
            promises.push(promise);
          }
        });
        Object.keys(_this7.groupFields).forEach(function (groupName) {
          var group = _this7.groupFields[groupName];
          var promise = _this7.validateGroup(groupName, group);
          if (isPromise(promise)) {
            promises.push(promise);
          }
        });
        if (promises.length) {
          Promise.allSettled(promises).then(function () {
            _this7.afterSubmitValidation(forceRevalidation);
            resolve(true);
          });
        } else {
          _this7.afterSubmitValidation(forceRevalidation);
          resolve(false);
        }
      });
    }
  }, {
    key: "revalidate",
    value: function revalidate() {
      var _this8 = this;
      return new Promise(function (resolve) {
        _this8.validateHandler(void 0, true).finally(function () {
          if (_this8.globalConfig.focusInvalidField) {
            _this8.focusInvalidField();
          }
          resolve(_this8.isValid);
        });
      });
    }
  }, {
    key: "validateHandler",
    value: function validateHandler(ev) {
      var _this9 = this;
      var forceRevalidation = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;
      if (this.globalConfig.lockForm) {
        this.lockForm();
      }
      return this.validate(forceRevalidation).finally(function () {
        var _a, _b;
        if (_this9.globalConfig.lockForm) {
          _this9.unlockForm();
        }
        if (_this9.isValid) {
          (_a = _this9.onSuccessCallback) == null ? void 0 : _a.call(_this9, ev);
        } else {
          (_b = _this9.onFailCallback) == null ? void 0 : _b.call(_this9, _this9.fields, _this9.groupFields);
        }
      });
    }
  }, {
    key: "setForm",
    value: function setForm(form) {
      this.form = form;
      this.form.setAttribute("novalidate", "novalidate");
      this.removeListener("submit", this.form, this.formSubmitHandler);
      this.addListener("submit", this.form, this.formSubmitHandler);
    }
  }, {
    key: "addListener",
    value: function addListener(type, elem, handler) {
      elem.addEventListener(type, handler);
      this.eventListeners.push({
        type: type,
        elem: elem,
        func: handler
      });
    }
  }, {
    key: "removeListener",
    value: function removeListener(type, elem, handler) {
      elem.removeEventListener(type, handler);
      this.eventListeners = this.eventListeners.filter(function (item) {
        return item.type !== type || item.elem !== elem;
      });
    }
  }, {
    key: "addField",
    value: function addField(field, rules, config) {
      if (typeof field !== "string") {
        throw Error("Field selector is not valid. Please specify a string selector.");
      }
      var elem = this.form.querySelector(field);
      if (!elem) {
        throw Error("Field with ".concat(field, " selector not found! Please check the field selector."));
      }
      if (!Array.isArray(rules) || !rules.length) {
        throw Error("Rules argument for the field [".concat(field, "] should be an array and should contain at least 1 element."));
      }
      rules.forEach(function (item) {
        if (!("rule" in item || "validator" in item || "plugin" in item)) {
          throw Error("Rules argument for the field [".concat(field, "] must contain at least one rule or validator property."));
        }
        if (!item.validator && !item.plugin && (!item.rule || !Object.values(Rules).includes(item.rule))) {
          throw Error("Rule should be one of these types: ".concat(Object.values(Rules).join(", "), ". Provided value: ").concat(item.rule));
        }
      });
      this.fields[field] = {
        elem: elem,
        rules: rules,
        isValid: void 0,
        config: config
      };
      this.setListeners(elem);
      if (this.isSubmitted) {
        this.validate();
      }
      return this;
    }
  }, {
    key: "removeField",
    value: function removeField(field) {
      if (typeof field !== "string") {
        throw Error("Field selector is not valid. Please specify a string selector.");
      }
      if (!this.fields[field]) {
        console.error("Field not found. Check the field selector.");
        return this;
      }
      var type = this.getListenerType(this.fields[field].elem.type);
      this.removeListener(type, this.fields[field].elem, this.handlerChange);
      this.clearErrors();
      delete this.fields[field];
      return this;
    }
  }, {
    key: "removeGroup",
    value: function removeGroup(group) {
      var _this10 = this;
      if (typeof group !== "string") {
        throw Error("Group selector is not valid. Please specify a string selector.");
      }
      if (!this.groupFields[group]) {
        console.error("Group not found. Check the group selector.");
        return this;
      }
      this.groupFields[group].elems.forEach(function (elem) {
        var type = _this10.getListenerType(elem.type);
        _this10.removeListener(type, elem, _this10.handlerChange);
      });
      this.clearErrors();
      delete this.groupFields[group];
      return this;
    }
  }, {
    key: "addRequiredGroup",
    value: function addRequiredGroup(groupField, errorMessage, config, successMessage) {
      var _this11 = this;
      if (typeof groupField !== "string") {
        throw Error("Group selector is not valid. Please specify a string selector.");
      }
      var elem = this.form.querySelector(groupField);
      if (!elem) {
        throw Error("Group with ".concat(groupField, " selector not found! Please check the group selector."));
      }
      var inputs = elem.querySelectorAll("input");
      var childrenInputs = Array.from(inputs).filter(function (input) {
        var parent = getClosestParent(_this11.groupFields, getNodeParents(input));
        if (!parent) {
          return true;
        }
        return parent[1].elems.find(function (elem2) {
          return elem2 !== input;
        });
      });
      this.groupFields[groupField] = {
        rules: [{
          rule: GroupRules.Required,
          errorMessage: errorMessage,
          successMessage: successMessage
        }],
        groupElem: elem,
        elems: childrenInputs,
        isDirty: false,
        isValid: void 0,
        config: config
      };
      inputs.forEach(function (input) {
        _this11.setListeners(input);
      });
      return this;
    }
  }, {
    key: "getListenerType",
    value: function getListenerType(type) {
      switch (type) {
        case "checkbox":
        case "select-one":
        case "file":
        case "radio":
          {
            return "change";
          }
        default:
          {
            return "input";
          }
      }
    }
  }, {
    key: "setListeners",
    value: function setListeners(elem) {
      var type = this.getListenerType(elem.type);
      this.removeListener(type, elem, this.handlerChange);
      this.addListener(type, elem, this.handlerChange);
    }
  }, {
    key: "clearFieldLabel",
    value: function clearFieldLabel(fieldName) {
      var _a, _b;
      (_a = this.errorLabels[fieldName]) == null ? void 0 : _a.remove();
      (_b = this.successLabels[fieldName]) == null ? void 0 : _b.remove();
    }
  }, {
    key: "clearFieldStyle",
    value: function clearFieldStyle(fieldName) {
      var _field$elem$classList;
      var _a, _b, _c, _d;
      var field = this.fields[fieldName];
      var errorStyle = ((_a = field.config) == null ? void 0 : _a.errorFieldStyle) || this.globalConfig.errorFieldStyle;
      Object.keys(errorStyle).forEach(function (key) {
        field.elem.style[key] = "";
      });
      var successStyle = ((_b = field.config) == null ? void 0 : _b.successFieldStyle) || this.globalConfig.successFieldStyle || {};
      Object.keys(successStyle).forEach(function (key) {
        field.elem.style[key] = "";
      });
      (_field$elem$classList = field.elem.classList).remove.apply(_field$elem$classList, _toConsumableArray(getClassList(((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass)).concat(_toConsumableArray(getClassList(((_d = field.config) == null ? void 0 : _d.successFieldCssClass) || this.globalConfig.successFieldCssClass))));
    }
  }, {
    key: "clearErrors",
    value: function clearErrors() {
      var _this12 = this;
      var _a, _b;
      Object.keys(this.errorLabels).forEach(function (key) {
        return _this12.errorLabels[key].remove();
      });
      Object.keys(this.successLabels).forEach(function (key) {
        return _this12.successLabels[key].remove();
      });
      for (var fieldName in this.fields) {
        this.clearFieldStyle(fieldName);
      }
      var _loop2 = function _loop2() {
        var group = _this12.groupFields[groupName];
        var errorStyle = ((_a = group.config) == null ? void 0 : _a.errorFieldStyle) || _this12.globalConfig.errorFieldStyle;
        Object.keys(errorStyle).forEach(function (key) {
          group.elems.forEach(function (elem) {
            var _elem$classList;
            var _a2;
            elem.style[key] = "";
            (_elem$classList = elem.classList).remove.apply(_elem$classList, _toConsumableArray(getClassList(((_a2 = group.config) == null ? void 0 : _a2.errorFieldCssClass) || _this12.globalConfig.errorFieldCssClass)));
          });
        });
        var successStyle = ((_b = group.config) == null ? void 0 : _b.successFieldStyle) || _this12.globalConfig.successFieldStyle || {};
        Object.keys(successStyle).forEach(function (key) {
          group.elems.forEach(function (elem) {
            var _elem$classList2;
            var _a2;
            elem.style[key] = "";
            (_elem$classList2 = elem.classList).remove.apply(_elem$classList2, _toConsumableArray(getClassList(((_a2 = group.config) == null ? void 0 : _a2.successFieldCssClass) || _this12.globalConfig.successFieldCssClass)));
          });
        });
      };
      for (var groupName in this.groupFields) {
        _loop2();
      }
      this.tooltips = [];
    }
  }, {
    key: "isTooltip",
    value: function isTooltip() {
      return !!this.globalConfig.tooltip;
    }
  }, {
    key: "lockForm",
    value: function lockForm() {
      var elems = this.form.querySelectorAll("input, textarea, button, select");
      for (var i = 0, len = elems.length; i < len; ++i) {
        elems[i].setAttribute("data-just-validate-fallback-disabled", elems[i].disabled ? "true" : "false");
        elems[i].setAttribute("disabled", "disabled");
        elems[i].style.pointerEvents = "none";
        elems[i].style.webkitFilter = "grayscale(100%)";
        elems[i].style.filter = "grayscale(100%)";
      }
    }
  }, {
    key: "unlockForm",
    value: function unlockForm() {
      var elems = this.form.querySelectorAll("input, textarea, button, select");
      for (var i = 0, len = elems.length; i < len; ++i) {
        if (elems[i].getAttribute("data-just-validate-fallback-disabled") !== "true") {
          elems[i].removeAttribute("disabled");
        }
        elems[i].style.pointerEvents = "";
        elems[i].style.webkitFilter = "";
        elems[i].style.filter = "";
      }
    }
  }, {
    key: "renderTooltip",
    value: function renderTooltip(elem, errorLabel, position) {
      var _this13 = this;
      var _a;
      var _elem$getBoundingClie = elem.getBoundingClientRect(),
        top = _elem$getBoundingClie.top,
        left = _elem$getBoundingClie.left,
        width = _elem$getBoundingClie.width,
        height = _elem$getBoundingClie.height;
      var errorLabelRect = errorLabel.getBoundingClientRect();
      var pos = position || ((_a = this.globalConfig.tooltip) == null ? void 0 : _a.position);
      switch (pos) {
        case "left":
          {
            errorLabel.style.top = "".concat(top + height / 2 - errorLabelRect.height / 2, "px");
            errorLabel.style.left = "".concat(left - errorLabelRect.width - TOOLTIP_ARROW_HEIGHT, "px");
            break;
          }
        case "top":
          {
            errorLabel.style.top = "".concat(top - errorLabelRect.height - TOOLTIP_ARROW_HEIGHT, "px");
            errorLabel.style.left = "".concat(left + width / 2 - errorLabelRect.width / 2, "px");
            break;
          }
        case "right":
          {
            errorLabel.style.top = "".concat(top + height / 2 - errorLabelRect.height / 2, "px");
            errorLabel.style.left = "".concat(left + width + TOOLTIP_ARROW_HEIGHT, "px");
            break;
          }
        case "bottom":
          {
            errorLabel.style.top = "".concat(top + height + TOOLTIP_ARROW_HEIGHT, "px");
            errorLabel.style.left = "".concat(left + width / 2 - errorLabelRect.width / 2, "px");
            break;
          }
      }
      errorLabel.dataset.direction = pos;
      var refresh = function refresh() {
        _this13.renderTooltip(elem, errorLabel, position);
      };
      return {
        refresh: refresh
      };
    }
  }, {
    key: "createErrorLabelElem",
    value: function createErrorLabelElem(name, errorMessage, config) {
      var _errorLabel$classList;
      var errorLabel = document.createElement("div");
      errorLabel.innerHTML = errorMessage;
      var customErrorLabelStyle = this.isTooltip() ? config == null ? void 0 : config.errorLabelStyle : (config == null ? void 0 : config.errorLabelStyle) || this.globalConfig.errorLabelStyle;
      Object.assign(errorLabel.style, customErrorLabelStyle);
      (_errorLabel$classList = errorLabel.classList).add.apply(_errorLabel$classList, _toConsumableArray(getClassList((config == null ? void 0 : config.errorLabelCssClass) || this.globalConfig.errorLabelCssClass)).concat(["just-validate-error-label"]));
      if (this.isTooltip()) {
        errorLabel.dataset.tooltip = "true";
      }
      if (this.globalConfig.testingMode) {
        errorLabel.dataset.testId = "error-label-".concat(name);
      }
      this.errorLabels[name] = errorLabel;
      return errorLabel;
    }
  }, {
    key: "createSuccessLabelElem",
    value: function createSuccessLabelElem(name, successMessage, config) {
      var _successLabel$classLi;
      if (successMessage === void 0) {
        return null;
      }
      var successLabel = document.createElement("div");
      successLabel.innerHTML = successMessage;
      var customSuccessLabelStyle = (config == null ? void 0 : config.successLabelStyle) || this.globalConfig.successLabelStyle;
      Object.assign(successLabel.style, customSuccessLabelStyle);
      (_successLabel$classLi = successLabel.classList).add.apply(_successLabel$classLi, _toConsumableArray(getClassList((config == null ? void 0 : config.successLabelCssClass) || this.globalConfig.successLabelCssClass)).concat(["just-validate-success-label"]));
      if (this.globalConfig.testingMode) {
        successLabel.dataset.testId = "success-label-".concat(name);
      }
      this.successLabels[name] = successLabel;
      return successLabel;
    }
  }, {
    key: "renderErrorsContainer",
    value: function renderErrorsContainer(label, errorsContainer) {
      var container = errorsContainer || this.globalConfig.errorsContainer;
      if (typeof container === "string") {
        var elem = this.form.querySelector(container);
        if (elem) {
          elem.appendChild(label);
          return true;
        } else {
          console.error("Error container with ".concat(container, " selector not found. Errors will be rendered as usual"));
        }
      }
      if (container instanceof Element) {
        container.appendChild(label);
        return true;
      }
      if (container !== void 0) {
        console.error("Error container not found. It should be a string or existing Element. Errors will be rendered as usual");
      }
      return false;
    }
  }, {
    key: "renderGroupLabel",
    value: function renderGroupLabel(elem, label, errorsContainer, isSuccess) {
      if (!isSuccess) {
        var renderedInErrorsContainer = this.renderErrorsContainer(label, errorsContainer);
        if (renderedInErrorsContainer) {
          return;
        }
      }
      elem.appendChild(label);
    }
  }, {
    key: "renderFieldLabel",
    value: function renderFieldLabel(elem, label, errorsContainer, isSuccess) {
      var _a, _b, _c, _d, _e, _f, _g;
      if (!isSuccess) {
        var renderedInErrorsContainer = this.renderErrorsContainer(label, errorsContainer);
        if (renderedInErrorsContainer) {
          return;
        }
      }
      if (elem.type === "checkbox" || elem.type === "radio") {
        var labelElem = document.querySelector("label[for=\"".concat(elem.getAttribute("id"), "\"]"));
        if (((_b = (_a = elem.parentElement) == null ? void 0 : _a.tagName) == null ? void 0 : _b.toLowerCase()) === "label") {
          (_d = (_c = elem.parentElement) == null ? void 0 : _c.parentElement) == null ? void 0 : _d.appendChild(label);
        } else if (labelElem) {
          (_e = labelElem.parentElement) == null ? void 0 : _e.appendChild(label);
        } else {
          (_f = elem.parentElement) == null ? void 0 : _f.appendChild(label);
        }
      } else {
        (_g = elem.parentElement) == null ? void 0 : _g.appendChild(label);
      }
    }
  }, {
    key: "showLabels",
    value: function showLabels(fields, isError) {
      var _this14 = this;
      Object.keys(fields).forEach(function (fieldName, i) {
        var error = fields[fieldName];
        var field = _this14.fields[fieldName];
        field.isValid = !isError;
        _this14.clearFieldStyle(fieldName);
        _this14.clearFieldLabel(fieldName);
        _this14.renderFieldError(fieldName, error);
        if (i === 0 && _this14.globalConfig.focusInvalidField) {
          setTimeout(function () {
            return field.elem.focus();
          }, 0);
        }
      });
    }
  }, {
    key: "showErrors",
    value: function showErrors(fields) {
      if (_typeof(fields) !== "object") {
        throw Error("[showErrors]: Errors should be an object with key: value format");
      }
      this.showLabels(fields, true);
    }
  }, {
    key: "showSuccessLabels",
    value: function showSuccessLabels(fields) {
      if (_typeof(fields) !== "object") {
        throw Error("[showSuccessLabels]: Labels should be an object with key: value format");
      }
      this.showLabels(fields, false);
    }
  }, {
    key: "renderFieldError",
    value: function renderFieldError(fieldName, message) {
      var _field$elem$classList3;
      var _a, _b, _c, _d, _e, _f;
      var field = this.fields[fieldName];
      if (field.isValid) {
        if (!field.asyncCheckPending) {
          var _field$elem$classList2;
          var successLabel = this.createSuccessLabelElem(fieldName, message !== void 0 ? message : field.successMessage, field.config);
          if (successLabel) {
            this.renderFieldLabel(field.elem, successLabel, (_a = field.config) == null ? void 0 : _a.errorsContainer, true);
          }
          (_field$elem$classList2 = field.elem.classList).add.apply(_field$elem$classList2, _toConsumableArray(getClassList(((_b = field.config) == null ? void 0 : _b.successFieldCssClass) || this.globalConfig.successFieldCssClass)));
        }
        return;
      }
      this.isValid = false;
      (_field$elem$classList3 = field.elem.classList).add.apply(_field$elem$classList3, _toConsumableArray(getClassList(((_c = field.config) == null ? void 0 : _c.errorFieldCssClass) || this.globalConfig.errorFieldCssClass)));
      var errorLabel = this.createErrorLabelElem(fieldName, message !== void 0 ? message : field.errorMessage, field.config);
      this.renderFieldLabel(field.elem, errorLabel, (_d = field.config) == null ? void 0 : _d.errorsContainer);
      if (this.isTooltip()) {
        this.tooltips.push(this.renderTooltip(field.elem, errorLabel, (_f = (_e = field.config) == null ? void 0 : _e.tooltip) == null ? void 0 : _f.position));
      }
    }
  }, {
    key: "renderErrors",
    value: function renderErrors() {
      var _this15 = this;
      var forceRevalidation = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
      var _a, _b, _c, _d;
      if (!this.isSubmitted && !forceRevalidation) {
        return;
      }
      this.clearErrors();
      this.isValid = true;
      var _loop3 = function _loop3() {
        var group = _this15.groupFields[groupName];
        if (group.isValid) {
          group.elems.forEach(function (elem) {
            var _elem$classList3;
            var _a2, _b2;
            Object.assign(elem.style, ((_a2 = group.config) == null ? void 0 : _a2.successFieldStyle) || _this15.globalConfig.successFieldStyle);
            (_elem$classList3 = elem.classList).add.apply(_elem$classList3, _toConsumableArray(getClassList(((_b2 = group.config) == null ? void 0 : _b2.successFieldCssClass) || _this15.globalConfig.successFieldCssClass)));
          });
          var successLabel = _this15.createSuccessLabelElem(groupName, group.successMessage, group.config);
          if (successLabel) {
            _this15.renderGroupLabel(group.groupElem, successLabel, (_a = group.config) == null ? void 0 : _a.errorsContainer, true);
          }
          return "continue";
        }
        _this15.isValid = false;
        group.elems.forEach(function (elem) {
          var _elem$classList4;
          var _a2, _b2;
          Object.assign(elem.style, ((_a2 = group.config) == null ? void 0 : _a2.errorFieldStyle) || _this15.globalConfig.errorFieldStyle);
          (_elem$classList4 = elem.classList).add.apply(_elem$classList4, _toConsumableArray(getClassList(((_b2 = group.config) == null ? void 0 : _b2.errorFieldCssClass) || _this15.globalConfig.errorFieldCssClass)));
        });
        var errorLabel = _this15.createErrorLabelElem(groupName, group.errorMessage, group.config);
        _this15.renderGroupLabel(group.groupElem, errorLabel, (_b = group.config) == null ? void 0 : _b.errorsContainer);
        if (_this15.isTooltip()) {
          _this15.tooltips.push(_this15.renderTooltip(group.groupElem, errorLabel, (_d = (_c = group.config) == null ? void 0 : _c.tooltip) == null ? void 0 : _d.position));
        }
      };
      for (var groupName in this.groupFields) {
        var _ret2 = _loop3();
        if (_ret2 === "continue") continue;
      }
      for (var fieldName in this.fields) {
        this.renderFieldError(fieldName);
      }
    }
  }, {
    key: "destroy",
    value: function destroy() {
      var _this16 = this;
      this.eventListeners.forEach(function (event) {
        _this16.removeListener(event.type, event.elem, event.func);
      });
      Object.keys(this.customStyleTags).forEach(function (key) {
        _this16.customStyleTags[key].remove();
      });
      this.clearErrors();
      if (this.globalConfig.lockForm) {
        this.unlockForm();
      }
    }
  }, {
    key: "refresh",
    value: function refresh() {
      var _this17 = this;
      this.destroy();
      if (!this.form) {
        console.error("Cannot initialize the library! Form is not defined");
      } else {
        this.initialize(this.form, this.globalConfig);
        Object.keys(this.fields).forEach(function (key) {
          _this17.addField(key, _toConsumableArray(_this17.fields[key].rules), _this17.fields[key].config);
        });
      }
    }
  }, {
    key: "setCurrentLocale",
    value: function setCurrentLocale(locale) {
      if (typeof locale !== "string" && locale !== void 0) {
        console.error("Current locale should be a string");
        return;
      }
      this.currentLocale = locale;
      if (this.isSubmitted) {
        this.validate();
      }
    }
  }, {
    key: "onSuccess",
    value: function onSuccess(callback) {
      this.onSuccessCallback = callback;
      return this;
    }
  }, {
    key: "onFail",
    value: function onFail(callback) {
      this.onFailCallback = callback;
      return this;
    }
  }]);
  return JustValidate;
}();


/***/ }),

/***/ "./js/main.js":
/*!********************!*\
  !*** ./js/main.js ***!
  \********************/
/*! no exports provided */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/ios-vh-fix */ "./js/utils/ios-vh-fix.js");
/* harmony import */ var _modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./modules/modals/init-modals */ "./js/modules/modals/init-modals.js");
/* harmony import */ var _just_validate_es__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./just-validate.es */ "./js/just-validate.es.js");




// ---------------------------------

window.addEventListener('DOMContentLoaded', function () {
  // Utils
  // ---------------------------------

  Object(_utils_ios_vh_fix__WEBPACK_IMPORTED_MODULE_0__["iosVhFix"])();

  // Modules
  // ---------------------------------

  // все скрипты должны быть в обработчике 'DOMContentLoaded', но не все в 'load'
  // в load следует добавить скрипты, не участвующие в работе первого экрана
  window.addEventListener('load', function () {
    Object(_modules_modals_init_modals__WEBPACK_IMPORTED_MODULE_1__["initModals"])();
  });
});
var burgerIconOpen = document.querySelector('.header__burger-icon--open');
var burgerIconClose = document.querySelector('.header__burger-icon--close');
var headerList = document.querySelector('.header__list');
var headerLogo = document.querySelector('.header__logo');
var overlay = document.querySelector('.overlay');
var mainHtml = document.querySelector('.page');

// If JS disabled

headerList.classList.remove('header__list--no-js');

// Open/Close menu

burgerIconClose.addEventListener('click', function () {
  burgerIconClose.style.display = 'none';
  burgerIconOpen.style.display = 'block';
  headerList.style.display = 'none';
  headerLogo.style.fill = '#F9FBFD';
  headerLogo.style.marginLeft = 0;
  overlay.classList.add('visually-hidden');
  mainHtml.classList.remove('page__hidden');
});
burgerIconOpen.addEventListener('click', function () {
  burgerIconClose.style.display = 'block';
  burgerIconOpen.style.display = 'none';
  headerList.style.display = 'block';
  headerLogo.style.fill = '#011C40';
  headerLogo.style.marginLeft = 36;
  mainHtml.classList.add('page__hidden');
  overlay.classList.remove('visually-hidden');
});
overlay.addEventListener('click', function () {
  burgerIconClose.style.display = 'none';
  burgerIconOpen.style.display = 'block';
  headerList.style.display = 'none';
  headerLogo.style.fill = '#F9FBFD';
  headerLogo.style.marginLeft = 0;
  overlay.classList.add('visually-hidden');
  mainHtml.classList.remove('page__hidden');
});

// Validation

var validation = new _just_validate_es__WEBPACK_IMPORTED_MODULE_2__["default"]('#booking-form', {
  errorFieldCssClass: 'is-invalid'
});
validation.addField('#booking-form__name', [{
  rule: 'minLength',
  value: 3,
  errorMessage: 'В имени должно быть больше трёх букв'
}, {
  rule: 'maxLength',
  value: 30
}, {
  rule: 'required',
  errorMessage: 'Укажите Ваше имя'
}, {
  rule: 'required'
}]).addField('#booking-form__email', [{
  rule: 'minLength',
  value: 3,
  errorMessage: 'В имени должно быть больше трёх букв'
}, {
  rule: 'maxLength',
  value: 30
}, {
  rule: 'required',
  errorMessage: 'Укажите Ваше имя'
}, {
  rule: 'required'
}]).addField('#agreement', [{
  rule: 'required',
  errorMessage: 'Вы должны согласиться с правилами'
}, {
  rule: 'required'
}]).addField('#booking-form__phone-number', [{
  rule: 'required',
  errorMessage: 'Укажите Ваш телефон'
}, {
  rule: 'minLength',
  value: 16,
  errorMessage: 'Неверный формат'
}, {
  rule: 'maxLength',
  value: 18
}, {
  rule: 'required'
}]).onSuccess(function (event) {
  document.getElementById("booking-form").submit();
});

// // Валидация модального окна

var validationModal = new _just_validate_es__WEBPACK_IMPORTED_MODULE_2__["default"]('#modal-window');
validationModal.addField('#modal-name', [{
  rule: 'minLength',
  value: 3,
  errorMessage: 'В имени должно быть больше трёх букв'
}, {
  rule: 'maxLength',
  value: 30
}, {
  rule: 'required',
  errorMessage: 'Укажите Ваше имя'
}]).addField('#rules', [{
  rule: 'required',
  errorMessage: 'Вы должны согласиться с правилами'
}]);
validationModal.addField('#modal-email', [{
  rule: 'minLength',
  value: 3,
  errorMessage: 'В имени должно быть больше трёх букв'
}, {
  rule: 'maxLength',
  value: 30
}, {
  rule: 'required',
  errorMessage: 'Укажите Ваше имя'
}]).addField('#modal-phone', [{
  rule: 'required',
  errorMessage: 'Укажите Ваш телефон'
}, {
  rule: 'minLength',
  value: 16,
  errorMessage: 'Неверный формат'
}, {
  rule: 'maxLength',
  value: 18
}]).onSuccess(function (event) {
  document.getElementById("modal-window").submit();
});

// Only numbers in phone fields

var bookingPhone = document.querySelector('#booking-form__phone-number'); // Получаем input
var allowSymbols = /[0-9]/g; // регулярка только цифры

bookingPhone.addEventListener('keyup', function () {
  bookingPhone.value = bookingPhone.value.replace(/[^,+\d]/g, '');
});

// ---------------------------------

// ❗❗❗ обязательно установите плагины eslint, stylelint, editorconfig в редактор кода.

// привязывайте js не на классы, а на дата атрибуты (data-validate)

// вместо модификаторов .block--active используем утилитарные классы
// .is-active || .is-open || .is-invalid и прочие (обязателен нейминг в два слова)
// .select.select--opened ❌ ---> [data-select].is-open ✅

// выносим все в дата атрибуты
// url до иконок пинов карты, настройки автопрокрутки слайдера, url к json и т.д.

// для адаптивного JS используется matchMedia и addListener
// const breakpoint = window.matchMedia(`(min-width:1024px)`);
// const breakpointChecker = () => {
//   if (breakpoint.matches) {
//   } else {
//   }
// };
// breakpoint.addListener(breakpointChecker);
// breakpointChecker();

// используйте .closest(el)

/***/ }),

/***/ "./js/modules/modals/init-modals.js":
/*!******************************************!*\
  !*** ./js/modules/modals/init-modals.js ***!
  \******************************************/
/*! exports provided: modals, initModals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "modals", function() { return modals; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "initModals", function() { return initModals; });
/* harmony import */ var _modals__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./modals */ "./js/modules/modals/modals.js");

var modals;

// Здесь реализован пример открытия модалки через колбэк закрытия
// const openModalInCloseCallback = (name, context = this) => {
//   context._enableScrolling = false;
//   context._setSettings('default');
//   modals.open(name);
// };

// closeCallback() {
//   openModalInCloseCallback('modal-5');
// },

var settings = {
  'default': {
    preventDefault: true,
    stopPlay: true,
    lockFocus: true,
    startFocus: true,
    focusBack: true,
    eventTimeout: 400,
    openCallback: false,
    closeCallback: false
  }
};
var initModals = function initModals() {
  var modalElements = document.querySelectorAll('.modal');
  modalElements.forEach(function (el) {
    setTimeout(function () {
      el.classList.remove('modal--preload');
    }, 100);
  });
  modals = new _modals__WEBPACK_IMPORTED_MODULE_0__["Modals"](settings);
  // Используйте в разработке экспортируемую переменную modals, window сделан для бэкэнда
  window.modals = modals;
};


/***/ }),

/***/ "./js/modules/modals/modals.js":
/*!*************************************!*\
  !*** ./js/modules/modals/modals.js ***!
  \*************************************/
/*! exports provided: Modals */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "Modals", function() { return Modals; });
/* harmony import */ var _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../utils/scroll-lock */ "./js/utils/scroll-lock.js");
/* harmony import */ var _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../utils/focus-lock */ "./js/utils/focus-lock.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }


var Modals = /*#__PURE__*/function () {
  function Modals() {
    var settings = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
    _classCallCheck(this, Modals);
    this._scrollLock = new _utils_scroll_lock__WEBPACK_IMPORTED_MODULE_0__["ScrollLock"]();
    this._focusLock = new _utils_focus_lock__WEBPACK_IMPORTED_MODULE_1__["FocusLock"]();
    this._modalOpenElements = document.querySelectorAll('[data-open-modal]');
    this._openedModalElement = null;
    this._modalName = null;
    this._enableScrolling = true;
    this._settingKey = 'default';
    this._settings = settings;
    this._preventDefault = this._settings[this._settingKey].preventDefault;
    this._stopPlay = this._settings[this._settingKey].stopPlay;
    this._lockFocus = this._settings[this._settingKey].lockFocus;
    this._startFocus = this._settings[this._settingKey].startFocus;
    this._focusBack = this._settings[this._settingKey].focusBack;
    this._eventTimeout = this._settings[this._settingKey].eventTimeout;
    this._openCallback = this._settings[this._settingKey].openCallback;
    this._closeCallback = this._settings[this._settingKey].closeCallback;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
    this._documentClickHandler = this._documentClickHandler.bind(this);
    this._modalClickHandler = this._modalClickHandler.bind(this);
    this._init();
  }
  _createClass(Modals, [{
    key: "_init",
    value: function _init() {
      if (this._modalOpenElements.length) {
        document.addEventListener('click', this._documentClickHandler);
      }
    }
  }, {
    key: "_setSettings",
    value: function _setSettings() {
      var settingKey = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._settingKey;
      if (!this._settings[settingKey]) {
        return;
      }
      this._preventDefault = typeof this._settings[settingKey].preventDefault === 'boolean' ? this._settings[settingKey].preventDefault : this._settings[this._settingKey].preventDefault;
      this._stopPlay = typeof this._settings[settingKey].stopPlay === 'boolean' ? this._settings[settingKey].stopPlay : this._settings[this._settingKey].stopPlay;
      this._lockFocus = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].lockFocus : this._settings[this._settingKey].lockFocus;
      this._startFocus = typeof this._settings[settingKey].startFocus === 'boolean' ? this._settings[settingKey].startFocus : this._settings[this._settingKey].startFocus;
      this._focusBack = typeof this._settings[settingKey].lockFocus === 'boolean' ? this._settings[settingKey].focusBack : this._settings[this._settingKey].focusBack;
      this._eventTimeout = typeof this._settings[settingKey].eventTimeout === 'number' ? this._settings[settingKey].eventTimeout : this._settings[this._settingKey].eventTimeout;
      this._openCallback = this._settings[settingKey].openCallback || this._settings[this._settingKey].openCallback;
      this._closeCallback = this._settings[settingKey].closeCallback || this._settings[this._settingKey].closeCallback;
    }
  }, {
    key: "_documentClickHandler",
    value: function _documentClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-open-modal]')) {
        return;
      }
      evt.preventDefault();
      this._modalName = target.closest('[data-open-modal]').dataset.openModal;
      if (!this._modalName) {
        return;
      }
      this.open();
    }
  }, {
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var isEscKey = evt.key === 'Escape' || evt.key === 'Esc';
      if (isEscKey) {
        evt.preventDefault();
        this.close(document.querySelector('.modal.is-active').dataset.modal);
      }
    }
  }, {
    key: "_modalClickHandler",
    value: function _modalClickHandler(evt) {
      var target = evt.target;
      if (!target.closest('[data-close-modal]')) {
        return;
      }
      this.close(target.closest('[data-modal]').dataset.modal);
    }
  }, {
    key: "_addListeners",
    value: function _addListeners(modal) {
      modal.addEventListener('click', this._modalClickHandler);
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_removeListeners",
    value: function _removeListeners(modal) {
      modal.removeEventListener('click', this._modalClickHandler);
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "_stopInteractive",
    value: function _stopInteractive(modal) {
      if (this._stopPlay) {
        modal.querySelectorAll('video, audio').forEach(function (el) {
          return el.pause();
        });
        modal.querySelectorAll('[data-iframe]').forEach(function (el) {
          el.querySelector('iframe').contentWindow.postMessage('{"event": "command", "func": "pauseVideo", "args": ""}', '*');
        });
      }
    }
  }, {
    key: "_autoPlay",
    value: function _autoPlay(modal) {
      modal.querySelectorAll('[data-iframe]').forEach(function (el) {
        var autoPlay = el.closest('[data-auto-play]');
        if (autoPlay) {
          el.querySelector('iframe').contentWindow.postMessage('{"event":"command","func":"playVideo","args":""}', '*');
        }
      });
    }
  }, {
    key: "open",
    value: function open() {
      var _this = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      if (!modal || modal.classList.contains('is-active')) {
        return;
      }
      document.removeEventListener('click', this._documentClickHandler);
      this._openedModalElement = document.querySelector('.modal.is-active');
      if (this._openedModalElement) {
        this._enableScrolling = false;
        this.close(this._openedModalElement.dataset.modal);
      }
      this._setSettings(modalName);
      modal.classList.add('is-active');
      if (!this._openedModalElement) {
        this._scrollLock.disableScrolling();
      }
      if (this._openCallback) {
        this._openCallback();
      }
      if (this._lockFocus) {
        this._focusLock.lock('.modal.is-active', this._startFocus);
      }
      setTimeout(function () {
        _this._addListeners(modal);
        _this._autoPlay(modal);
        document.addEventListener('click', _this._documentClickHandler);
      }, this._eventTimeout);
    }
  }, {
    key: "close",
    value: function close() {
      var _this2 = this;
      var modalName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this._modalName;
      var modal = document.querySelector("[data-modal=\"".concat(modalName, "\"]"));
      document.removeEventListener('click', this._documentClickHandler);
      if (!modal || !modal.classList.contains('is-active')) {
        return;
      }
      if (this._lockFocus) {
        this._focusLock.unlock(this._focusBack);
      }
      modal.classList.remove('is-active');
      this._removeListeners(modal);
      this._stopInteractive(modal);
      if (this._closeCallback) {
        this._closeCallback();
      }
      if (this._enableScrolling) {
        setTimeout(function () {
          _this2._scrollLock.enableScrolling();
        }, this._eventTimeout);
      }
      setTimeout(function () {
        document.addEventListener('click', _this2._documentClickHandler);
      }, this._eventTimeout);
      this._setSettings('default');
      this._enableScrolling = true;
    }
  }]);
  return Modals;
}();

/***/ }),

/***/ "./js/utils/focus-lock.js":
/*!********************************!*\
  !*** ./js/utils/focus-lock.js ***!
  \********************************/
/*! exports provided: FocusLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "FocusLock", function() { return FocusLock; });
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }
var SELECTORS = ['a[href]', 'area[href]', 'input:not([disabled]):not([type="hidden"]):not([aria-hidden])', 'select:not([disabled]):not([aria-hidden])', 'textarea:not([disabled]):not([aria-hidden])', 'button:not([disabled]):not([aria-hidden])', 'iframe', 'object', 'embed', '[contenteditable]', '[tabindex]:not([tabindex^="-"])'];
var FocusLock = /*#__PURE__*/function () {
  function FocusLock() {
    _classCallCheck(this, FocusLock);
    this._lockedSelector = null;
    this._focusableElements = null;
    this._endElement = null;
    this._selectors = SELECTORS;
    this._documentKeydownHandler = this._documentKeydownHandler.bind(this);
  }
  _createClass(FocusLock, [{
    key: "_documentKeydownHandler",
    value: function _documentKeydownHandler(evt) {
      var activeElement = document.activeElement;
      if (evt.key === 'Tab') {
        if (!this._focusableElements.length) {
          evt.preventDefault();
          activeElement.blur();
          return;
        }
        if (this._focusableElements.length === 1) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
        if (this._focusableElements.length > 1 && !activeElement.closest(this._lockedSelector)) {
          evt.preventDefault();
          this._focusableElements[0].focus();
          return;
        }
      }
      if (evt.key === 'Tab' && !evt.shiftKey && activeElement === this._focusableElements[this._focusableElements.length - 1]) {
        evt.preventDefault();
        this._focusableElements[0].focus();
      }
      if (evt.key === 'Tab' && evt.shiftKey && activeElement === this._focusableElements[0]) {
        evt.preventDefault();
        this._focusableElements[this._focusableElements.length - 1].focus();
      }
    }
  }, {
    key: "lock",
    value: function lock(lockedSelector) {
      var startFocus = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
      this.unlock();
      this._lockedSelector = lockedSelector;
      var lockedElement = document.querySelector(this._lockedSelector);
      if (!lockedElement) {
        return;
      }
      this._focusableElements = lockedElement.querySelectorAll(this._selectors);
      this._endElement = document.activeElement;
      var startElement = lockedElement.querySelector('[data-focus]') || this._focusableElements[0];
      if (this._endElement) {
        this._endElement.blur();
      }
      if (startElement && startFocus) {
        startElement.focus();
      }
      document.addEventListener('keydown', this._documentKeydownHandler);
    }
  }, {
    key: "unlock",
    value: function unlock() {
      var returnFocus = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;
      if (this._endElement && returnFocus) {
        this._endElement.focus();
      }
      this._lockedSelector = null;
      this._focusableElements = null;
      this._endElement = null;
      document.removeEventListener('keydown', this._documentKeydownHandler);
    }
  }]);
  return FocusLock;
}();
window.focusLock = new FocusLock();

/***/ }),

/***/ "./js/utils/ios-checker.js":
/*!*********************************!*\
  !*** ./js/utils/ios-checker.js ***!
  \*********************************/
/*! exports provided: iosChecker */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosChecker", function() { return iosChecker; });
var iosChecker = function iosChecker() {
  return ['iPad Simulator', 'iPhone Simulator', 'iPod Simulator', 'iPad', 'iPhone', 'iPod'].includes(navigator.platform)
  // iPad on iOS 13 detection
  || navigator.userAgent.includes('Mac') && 'ontouchend' in document;
};

/***/ }),

/***/ "./js/utils/ios-vh-fix.js":
/*!********************************!*\
  !*** ./js/utils/ios-vh-fix.js ***!
  \********************************/
/*! exports provided: iosVhFix */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "iosVhFix", function() { return iosVhFix; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");

var iosVhFix = function iosVhFix() {
  if (!(!!window.MSInputMethodContext && !!document.documentMode)) {
    if (Object(_ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"])()) {
      var vh = window.innerHeight * 0.01;
      document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      window.addEventListener('resize', function () {
        vh = window.innerHeight * 0.01;
        document.documentElement.style.setProperty('--vh', "".concat(vh, "px"));
      });
    }
  }
};


/***/ }),

/***/ "./js/utils/scroll-lock.js":
/*!*********************************!*\
  !*** ./js/utils/scroll-lock.js ***!
  \*********************************/
/*! exports provided: ScrollLock */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "ScrollLock", function() { return ScrollLock; });
/* harmony import */ var _ios_checker__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./ios-checker */ "./js/utils/ios-checker.js");
function _typeof(obj) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) { return typeof obj; } : function (obj) { return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }, _typeof(obj); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(arg) { var key = _toPrimitive(arg, "string"); return _typeof(key) === "symbol" ? key : String(key); }
function _toPrimitive(input, hint) { if (_typeof(input) !== "object" || input === null) return input; var prim = input[Symbol.toPrimitive]; if (prim !== undefined) { var res = prim.call(input, hint || "default"); if (_typeof(res) !== "object") return res; throw new TypeError("@@toPrimitive must return a primitive value."); } return (hint === "string" ? String : Number)(input); }

var ScrollLock = /*#__PURE__*/function () {
  function ScrollLock() {
    _classCallCheck(this, ScrollLock);
    this._iosChecker = _ios_checker__WEBPACK_IMPORTED_MODULE_0__["iosChecker"];
    this._lockClass = this._iosChecker() ? 'scroll-lock-ios' : 'scroll-lock';
    this._scrollTop = null;
    this._fixedBlockElements = document.querySelectorAll('[data-fix-block]');
  }
  _createClass(ScrollLock, [{
    key: "_getScrollbarWidth",
    value: function _getScrollbarWidth() {
      return window.innerWidth - document.documentElement.clientWidth;
    }
  }, {
    key: "_getBodyScrollTop",
    value: function _getBodyScrollTop() {
      return self.pageYOffset || document.documentElement && document.documentElement.ScrollTop || document.body && document.body.scrollTop;
    }
  }, {
    key: "disableScrolling",
    value: function disableScrolling() {
      var _this = this;
      this._scrollTop = document.body.dataset.scroll = document.body.dataset.scroll ? document.body.dataset.scroll : this._getBodyScrollTop();
      if (this._getScrollbarWidth()) {
        document.body.style.paddingRight = "".concat(this._getScrollbarWidth(), "px");
        this._fixedBlockElements.forEach(function (block) {
          block.style.paddingRight = "".concat(_this._getScrollbarWidth(), "px");
        });
      }
      document.body.style.top = "-".concat(this._scrollTop, "px");
      document.body.classList.add(this._lockClass);
    }
  }, {
    key: "enableScrolling",
    value: function enableScrolling() {
      document.body.classList.remove(this._lockClass);
      window.scrollTo(0, +document.body.dataset.scroll);
      document.body.style.paddingRight = null;
      document.body.style.top = null;
      this._fixedBlockElements.forEach(function (block) {
        block.style.paddingRight = null;
      });
      document.body.removeAttribute('data-scroll');
      this._scrollTop = null;
    }
  }]);
  return ScrollLock;
}();
window.scrollLock = new ScrollLock();

/***/ })

/******/ });
//# sourceMappingURL=main.min.js.map